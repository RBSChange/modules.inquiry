<?xml version="1.0"?>
<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xbl="http://www.mozilla.org/xbl" xmlns:html="http://www.w3.org/1999/xhtml"
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

	<!-- Message panel. -->
	
	<binding id="cMessagesPanel" extends="layout.cDocumentEditor#cDocumentEditorPanel">
		<resources>
			<stylesheet src="modules.uixul.cFieldsGroup" />
			<stylesheet src="modules.inquiry.cMessageEditor" />
		</resources>
		<content>
			<xul:vbox flex="1">
				<xul:cmessageinfo anonid="message" />
				<xul:scrollbox anonid="scrollctrl" flex="1" class="editordatacontainer" orient="vertical">
					<xul:groupbox class="messageForm" anonid="messageForm">
						<xul:caption label="${trans:m.inquiry.bo.doceditor.panel.messages.Title,ucf,attr}" />
						<xul:vbox>
							<xul:cfield name="messageContents" anonid="field_messageContents" fieldtype="longtext" cols="100" hidehelp="true" />
							<xul:hbox>
								<xul:button anonid="sendMessageButton" label="${trans:m.inquiry.bo.doceditor.panel.messages.Send,ucf,attr}" image="{IconsBase}/small/mail.png" />
								<xul:hbox anonid="tasksbuttons"></xul:hbox>
							</xul:hbox>
						</xul:vbox>
					</xul:groupbox>
					<xul:vbox anonid="messages" />
					<xul:spacer flex="1" />
				</xul:scrollbox>					
			</xul:vbox>
		</content>
		<implementation>
			<constructor><![CDATA[
				var me = this;
				var node = document.getAnonymousElementByAttribute(this, 'anonid', 'sendMessageButton');
				node.addEventListener('command', function () { me.sendNewMessage(this); }, true);
			]]></constructor>
		
			<property name="panelWidth" readonly="true">
				<getter><![CDATA[
					return this.boxObject.width;
				]]></getter>
			</property>
		
			<method name="getInitializeParameters">
				<body><![CDATA[
					return {
						module: 'inquiry',
						action: 'LoadMessagesByTarget', 
						cmpref: this.documentEditor.documentid, 
						lang : Context.W_LANG
					};
				]]></body>
			</method>
									
			<method name="fireInitializeComplete">
				<parameter name="result" />
				<body><![CDATA[
					var me = this;
					if (result.status != "OK")
					{
						this.showErrorMessage(result.contents.errorMessage);
					}
					else
					{									
						var messages = result.contents.messages;
						var message;
						var section;
						var messagesNode = document.getAnonymousElementByAttribute(this, "anonid", 'messages');
						var textStyle = 'style="width:'+(this.panelWidth - 170)+'px; white-space: normal;"';
						for (var i = 0; i < messages.length; i++)
						{
							message = messages[i];
							var doc = new DOMParser().parseFromString('<div xmlns="http://www.w3.org/1999/xhtml" ' + textStyle + '>' + message['contents'] + '</div>', 'text/xml');
							
							section = messagesNode.childNodes[i];
							if (section == null)
							{
								section = document.createElementNS('http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul', 'section');
								section.className = 'message';
								messagesNode.appendChild(section);
							}
							else
							{
								section.removeAttribute('collapsed');
								section.removeChild(section.firstChild);
							}
							
							for (var name in message)
							{
								section.setAttribute(name, message[name]);
								if (message[name] && message[name] != '')
								{
									section.removeAttribute(name+'hidden');
								}
								else
								{
									section.setAttribute(name+'hidden', true);
								}
							}
							
							section.appendChild(doc.documentElement);
						}
						while (section = messagesNode.childNodes[i])
						{
							section.setAttribute('collapsed', 'true');
							i++;
						}
						
						var messageFormNode = document.getAnonymousElementByAttribute(this, "anonid", 'messageForm');
						if (result.contents.canSendNew)
						{
							messageFormNode.removeAttribute('collapsed');
							var tasks = result.contents.tasks;
							var task;
							var button;
							var tasksNode = document.getAnonymousElementByAttribute(this, "anonid", 'tasksbuttons');
							for (var i = 0; i < tasks.length; i++)
							{
								task = tasks[i];
								button = tasksNode.childNodes[i];
								if (button == null)
								{
									button = document.createElementNS('http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul', 'button');
									button.setAttribute('image', '{IconsBase}/small/task.png');
									button.addEventListener('command', function () { me.sendNewMessage(this); }, true);
									tasksNode.appendChild(button);
								}
								else
								{
									button.removeAttribute('collapsed');
								}
								button.setAttribute('label', task.label);
								button.setAttribute('taskType', task.type);
								button.setAttribute('taskId', task.id);
							}
							while (button = tasksNode.childNodes[i])
							{
								button.setAttribute('collapsed', 'true');
								i++;
							}
						}
						else
						{
							messageFormNode.setAttribute('collapsed', 'true');
						}
					}
					this.mInitialized = true;
					this.gotoTop();
				]]></body>
			</method>
			
			<method name="sendNewMessage">
				<parameter name="button" />
				<body><![CDATA[
					var node = document.getAnonymousElementByAttribute(this, 'anonid', 'field_messageContents');
					if (node.value)
					{
						var result = wCore.executeJSON('inquiry', 'SendMessage', {cmpref: this.documentEditor.documentid, contents: node.value, taskType: button.getAttribute('taskType'), taskId: button.getAttribute('taskId')}, null, true);
						if (result.status != 'OK')
						{	
							this.showErrorMessage(result.contents.errorMessage);
						}
						else
						{
							this.showTextMessage("${trans:m.inquiry.bo.doceditor.panel.messages.Success-sending-message,ucf,js}");
							this.fireInitializeComplete(result);
							node.value = '';
						}
					}
					else
					{
						this.showErrorMessage("${trans:m.inquiry.bo.doceditor.panel.messages.Error-no-message-to-send,ucf,js}");
					}
				]]></body>
			</method>
		</implementation>
	</binding>	

	<binding id="messageSection">
		<resources>
			<stylesheet src="modules.inquiry.cMessageEditor" />
		</resources>
		<content>
			<xul:groupbox flex="1">
				<xul:caption xbl:inherits="label" />
				<xul:grid flex="1">
					<xul:columns>
						<xul:column width="120" />
						<xul:column flex="1" />
					</xul:columns>
					<xul:rows>
						<xul:row>
							<xul:label value="${trans:m.inquiry.document.message.Creationdate,ucf,attr}" />
							<xul:label class="allow-text-selection" xbl:inherits="xbl:text=date" />
						</xul:row>
						<xul:row>
							<xul:label value="${trans:m.inquiry.document.message.Sender,ucf,attr}" />
							<xul:label class="allow-text-selection" xbl:inherits="xbl:text=authorFullName" />
						</xul:row>
						<xul:row>
							<xul:label value="${trans:m.inquiry.document.message.Contents,ucf,attr}" />
							<xul:hbox flex="1">
								<html:div flex="1" anonid="contents" class="allow-text-selection"><xbl:children /></html:div>
							</xul:hbox>
						</xul:row>
					</xul:rows>
				</xul:grid>
			</xul:groupbox>
		</content>
	</binding>

	<!-- Inquiry validation panel. -->
	
	<binding id="cResponseDialog" extends="core.wDialog#wDialog">
		<implementation>
			<constructor><![CDATA[
				//wCore.debug('cResponseDialog.constructor');	
			]]></constructor>

			<method name="onInitialize">
				<body><![CDATA[
					this.autoResize(600, 120);
				]]></body>
			</method>

			<method name="onCancel">
				<body><![CDATA[
					this.controller.closeModalDialog();
				]]></body>
			</method>

			<method name="onOk">
				<body><![CDATA[
					var uri = ['inquiry', 'openDocument', 'modules_inquiry_inquiry', this.parameters.documentId, 'resume'].join(',');
					openActionUri(uri);
					this.controller.closeModalDialog();
				]]></body>
			</method>
		</implementation>
		<xbl:content>
			<xul:vbox flex="1">
				<xul:hbox class="dialog-header">
					<xul:label value="${trans:m.inquiry.bo.general.Inquiry-response-title,ucf,attr}" class="dialog-title" />
					<xul:spacer flex="1" />
					<xul:vbox pack="center">
						<xul:toolbarbutton height="16" width="16" image="{IconsBase}/small/delete.png" oncommand="onCancel();" tooltiptexts="${trans:m.uixul.bo.dialog.Cancel,ucf,attr}" />
					</xul:vbox>
				</xul:hbox>
				<xul:vbox>
					<xul:description value="${trans:m.inquiry.bo.general.Open-inquiry-help,ucf,attr}" />
					<xul:spacer height="15" />
					<xul:button anonid="submitButton" oncommand="onOk();" label="${trans:m.inquiry.bo.general.Open-inquiry,ucf,attr}" />
				</xul:vbox>
			</xul:vbox>
		</xbl:content>
	</binding>
</bindings>